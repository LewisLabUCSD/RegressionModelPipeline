{
    "collab_server" : "",
    "contents" : "### main\n\n#' model_selection\n#' \n#' Main function for model selection from a set of many variables\n#' @param df, a data.frame containing response and observations variables. Factors with more than 2 levels have only been implimented for test='LRT'\n#' @param observations, a character vector of the names of independent/observations variables in df\n#' @param response, a character vector of the names of dependent/response variables in df\n#' @param family, a character string indicating the family associated with the submitted model c('gaussian','binomial','poisson'...)\n#' @param model, a model associated for testing the variables c(glm,lm)\n#' @param interactions, a boolean indicating if interactions should be assessed. Default is False.\n#' @param test, a character string indicating Likelihood Ratio Test ('LRT') testing likelihood improvement of a model or Wald test ('Wald') testing coefficient > 0\n#' @param thresh_screen, a numeric value indicating the p-value cutoff for the univariate screening\n#' @param only_return_selected, a boolean value. If true, only models with p-value less than the threshold will be returned. Otherwise, all models will be returned.\n#' @param K, a numeric value indicating the number of folds to use for k-fold cross-validation. K=10 by default. K=0 to skip k-fold validation.\n#' @return a list containing: univariate models, the final selected model, and crossvalidation stats.\n#' @export\n#' @examples\n#' mod=model_selection(df=mtcars,colnames(mtcars)[-1],response = 'mpg',interactions=F,test='LRT',K=5,family = 'gaussian',model=glm)\n#' out=vis(mod)\n#' print(out[[1]])\n#' print(out[[2]])\nmodel_selection <- function(df,observations,response,family='gaussian',model=glm,interactions=FALSE,test=c('Wald','LRT'),thresh_screen=.2,only_return_selected=FALSE,K=10){\n  if(length(response)!=1){stop('use multiresponse_model_selection()')}\n  if(!test%in%c('Wald','LRT')){stop(\"test is not in c(Wald,LRT)\")}\n  #if(!interactions%in%c('signif','none','all')){stop(\"interactions is not in c(signif,none,all)\")}\n  \n  # Univariate Screen\n  observationsL <<- univariate_screen(df,observations,response,family,model,interactions,test,thresh=thresh_screen,only_return_selected=only_return_selected)\n  \n  # Multivariate Model\n  selected_model = stepwise_multivariate_model_selection(df,names(observationsL)[attr(observationsL,'Pr')<thresh_screen],response,family,model,interactions)\n\n  # Model Diagnostics\n\n  # Cross Validation\n  if(K>1){\n    cv=cross_assess_wrapper(data=df,formula=selected_model$formula,resp=response,family=family,K,model,cv_function=cross_valid_kfold)\n  }else{\n    cv=NULL\n  }\n  \n  return(list(screen=observationsL,final=selected_model,cv=cv))\n}\n\n#######################################\n### Run Tests\niris_test<-function(){\n  print(str(iris))\n}\n\nmtcars_tests <- function(){\n  #\tsource('~/Desktop/modeling_functions.r')\n  K=5\n  mod=model_selection(df=mtcars,colnames(mtcars)[-1],response = 'mpg',interactions=F,test='LRT',K=5,family = 'gaussian',model=glm)\n  out=vis(mod)\n  out[[1]]\n  out[[2]]\n  \n  mod=model_selection(df=mtcars,colnames(mtcars)[-1],response = 'mpg',interactions=F,test='LRT',family='poisson',K=K,thresh_screen = .05)\n\n  \n  mod=model_selection(df=mtcars,colnames(mtcars)[-1],response = 'mpg',interactions=F,test='Wald',K=K)\n  mod=model_selection(df=mtcars,colnames(mtcars)[-1],response = 'mpg',interactions=T,test='LRT',K=K)\n  mod=model_selection(df=mtcars,colnames(mtcars)[-1],response = 'mpg',interactions=T,test='LRT',only_return_selected=FALSE,K=K)\n  \n  mtcars$log_mpg = log(mtcars$mpg)\n  mod=model_selection(df=mtcars,colnames(mtcars)[-1],response = 'log_mpg',interactions=F,test='LRT',K=K)\n}\n",
    "created" : 1469042985452.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "866635370",
    "id" : "22BD6BA",
    "lastKnownWriteTime" : 1474506301,
    "last_content_update" : 1474506301763,
    "path" : "~/Desktop/RegressionModelPipeline/R/RegressionModelPipeline.R",
    "project_path" : "R/RegressionModelPipeline.R",
    "properties" : {
    },
    "relative_order" : 0,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}