{
    "collab_server" : "",
    "contents" : "#' vis\n#' \n#' A visualizaiton for univariate and multivariate regressions showing coefficient, confidence intervals and p-values\n#' @param out a length 2 list univariate and final models: list(screen=several_univariate_models,final=one_multivariate_model). Either screen or final may be set to NULL\n#' @param family a character indicating the glm family fit for the model. If 'binomial' vis_logit will be run. Otherwise standard output is produced.\n#' @param Pr an optional numeric vector of the same length and order as out$screen. If the user wants to specify univariate p-values they may do so here. Otherwise the wald test for the 1st variable in the model will be used.\n#' @param fullUnivariate visualizes all variables in each univariate model\n#' @param intercept boolean indicating if the intercept should be visualized. True by default.\n#' @param col_scheme a grDevices::Palettes to specify the color scheme representing -log10(p-values). rainbow(4) by default.\n#' @return a list of 2 ggplot2 objects visualizing the univariate screening and multivariate final model.\n#' @export\n#' @import ggplot2\n#' @import grDevices\nvis <- function(out,family='gaussian',Pr=NULL,fullUnivariate=FALSE,intercept=TRUE,col_scheme=rainbow(4),...){\n  if(!is.character(family)){stop('family must be a character vector')}\n  if(family=='binomial'){ return(vis_logit(out,family,Pr,fullUnivariate,intercept,col_scheme,...)) }\n  \n  multi=NULL; uni=NULL\n  \n  mod1 = out$final\n  screen= out$screen\n  \n  ### Multivariate visuals\n  if(!is.null(out$final)){\n    summary_df <- as.data.frame(cbind( cbind(coefficients = coef(mod1), confint(mod1)) , coef(summary(mod1)) ))\n    summary_df$vars = factor( rownames(summary_df) , levels = rownames(summary_df)[order(summary_df$Estimate)] )\n    colnames(summary_df)[c(2:3,7)] = c('X2.5','X97.5','Pr')\n    \n    limits <- aes(ymax = X97.5, ymin=X2.5)\n    if(intercept){\n      p <- ggplot(summary_df, aes(x=vars, y=coefficients,color=-log(Pr,10)))\n    }else{\n      p <- ggplot(summary_df[-1,], aes(x=vars, y=coefficients,color=-log(Pr,10)))\n    }\n    p <- p + geom_point() + geom_errorbar(limits, width=0.2) + theme(axis.text.x = element_text(angle = 90, hjust = 1))\n    p <- p + scale_colour_gradientn(colours=col_scheme) # + scale_y_continuous(trans=trans)\n    #p <- p +                                   scale_colour_gradientn(colours=col_scheme)\n    multi = p\n  }\n  \n  ### Full Univariate Visuals\n  if(fullUnivariate){\n    for(i in 1:length(screen)){\n      mod1 = screen[[i]]\n      summary_df <- as.data.frame(cbind( cbind(coefficients = coef(mod1), confint(mod1)) , coef(summary(mod1)) ))\n      summary_df$vars = factor( rownames(summary_df) , levels = rownames(summary_df)[order(summary_df$Estimate)] )\n      colnames(summary_df)[c(2:3,7)] = c('X2.5','X97.5','Pr')\n      summary_df$var_i = names(screen)[i]\n      if(i==1){\n        df = summary_df\n      }else{\n        df = rbind(df,summary_df)\n      }\n    }\n    \n    limits <- aes(ymax = X97.5, ymin=X2.5)\n    p <- ggplot(df[-1,], aes(x=vars, y=Odds_Ratio,color=-log(Pr,10))) + facet_wrap(~ var_i)\n    p <- p + geom_point() + geom_errorbar(limits, width=0.2) + theme(axis.text.x = element_text(angle = 90, hjust = 1))\n    p <- p + scale_colour_gradientn(colours=col_scheme) # + scale_y_continuous(trans=trans)\n    uni = p\n    \n    return(list(multivar=multi,univar=uni)) # early return\n  }\n  \n  ### Univariate model\n  if(!is.null(out$screen)){\n    screen_tmp = list()\n    for(i in names(screen)){\n      if(!is.na(coef(screen[[i]])[2])){ screen_tmp[[i]] = screen[[i]] }\n    }\n    screen = screen_tmp\n    screen_df = as.data.frame( cbind( do.call(rbind,lapply(screen,function(x) coef(summary(x))[2,]  ) ) , \n                                      do.call(rbind,lapply(screen,function(x) cbind(coefficients = coef(x), confint(x))[2,]  ) )\n    ) )\n    screen_df$vars = factor( rownames(screen_df) , levels = rownames(screen_df)[order(screen_df$Estimate)] )\n    colnames(screen_df)[c(4,6:7)] = c('Pr', 'X2.5','X97.5')\n    if(!is.null(Pr)){ screen_df$Pr = Pr }\n    screen_df = screen_df[order(screen_df$Estimate),]\n    limits <- aes(ymax = X97.5, ymin=X2.5)\n    p <- ggplot(screen_df, aes(x=vars, y=coefficients,color=-log(Pr,10)))\n    p <- p + geom_point() + geom_errorbar(limits, width=0.2) + theme(axis.text.x = element_text(angle = 90, hjust = 1))\n    p <- p + scale_colour_gradientn(colours=col_scheme) # + scale_y_continuous(trans=trans)\n    uni = p\n  }\n  \n  return(list(multivar=multi,univar=uni))\n}\n\n######################\n\n#' vis_logit\n#' \n#' A visualizaiton for logit regressions that calculates Odds Ratios (OR)\n#' @param out a length 2 list univariate and final models: list(screen=several_univariate_models,final=one_multivariate_model). Either screen or final may be set to NULL\n#' @param Pr an optional numeric vector of the same length and order as out$screen. If the user wants to specify univariate p-values they may do so here. Otherwise the wald test for the 1st variable in the model will be used.\n#' @param fullUnivariate visualizes all variables in each univariate model\n#' @param intercept boolean indicating if the intercept should be visualized. True by default.\n#' @param trans a character indicating the transformation for the y-axis: log2, log10, sqrt. Refers to the trans parameter of scale_y_continuous. log2 by default.\n#' @param col_scheme a grDevices::Palettes to specify the color scheme representing -log10(p-values). rainbow(4) by default.\n#' @return a list of 2 ggplot2 objects visualizing the univariate screening and multivariate final model.\n#' @import ggplot2\n#' @import grDevices\n#' @export\nvis_logit <- function(out,Pr=NULL,fullUnivariate=FALSE,intercept=TRUE,trans='log2',col_scheme=rainbow(4)){\n  multi=NULL; uni=NULL\n  \n  mod1 = out$final\n  screen= out$screen\n  \n  ### Multivariate visuals\n  if(!is.null(out$final)){\n    summary_df <- as.data.frame(cbind( exp(cbind(Odds_Ratio = coef(mod1), confint(mod1))) , coef(summary(mod1)) ))\n    summary_df$vars = factor( rownames(summary_df) , levels = rownames(summary_df)[order(summary_df$Estimate)] )\n    #summary_df$vars = rownames(summary_df)\n    colnames(summary_df)[c(2:3,7)] = c('X2.5','X97.5','Pr')\n    \n    limits <- aes(ymax = X97.5, ymin=X2.5)\n    if(intercept){\n      p <- ggplot(summary_df, aes(x=vars, y=Odds_Ratio,color=-log(Pr,10)))\n    }else{\n      p <- ggplot(summary_df[-1,], aes(x=vars, y=Odds_Ratio,color=-log(Pr,10)))\n    }\n    p <- p + geom_point() + geom_errorbar(limits, width=0.2) + theme(axis.text.x = element_text(angle = 90, hjust = 1))\n    p <- p + scale_y_continuous(trans=trans) + scale_colour_gradientn(colours=col_scheme)\n    multi = p\n  }\n  \n  ### Full Univariate Visuals\n  if(fullUnivariate){\n    for(i in 1:length(screen)){\n      mod1 = screen[[i]]\n      summary_df <- as.data.frame(cbind( exp(cbind(Odds_Ratio = coef(mod1), confint(mod1))) , coef(summary(mod1)) ))\n      summary_df$vars = factor( rownames(summary_df) , levels = rownames(summary_df)[order(summary_df$Estimate)] )\n      colnames(summary_df)[c(2:3,7)] = c('X2.5','X97.5','Pr')\n      summary_df$var_i = names(screen)[i]\n      if(i==1){\n        df = summary_df\n      }else{\n        df = rbind(df,summary_df)\n      }\n    }\n    \n    limits <- aes(ymax = X97.5, ymin=X2.5)\n    p <- ggplot(df[-1,], aes(x=vars, y=Odds_Ratio,color=-log(Pr,10))) + facet_wrap(~ var_i)\n    p <- p + geom_point() + geom_errorbar(limits, width=0.2) + theme(axis.text.x = element_text(angle = 90, hjust = 1))\n    p <- p + scale_y_continuous(trans=trans) + scale_colour_gradientn(colours=col_scheme)\n    uni = p\n    \n    return(list(multivar=multi,univar=uni)) # early return\n  }\n  \n  ### Univariate visuals\n  if(!is.null(out$screen)){\n    screen_tmp = list()\n    for(i in names(screen)){\n      if(!is.na(coef(screen[[i]])[2])){ screen_tmp[[i]] = screen[[i]] }\n    }\n    screen = screen_tmp\n    screen_df = as.data.frame( cbind( do.call(rbind,lapply(screen,function(x) coef(summary(x))[2,] ) ) , \n                                      do.call(rbind,lapply(screen,function(x) exp(cbind(Odds_Ratio = coef(x), confint(x)))[2,] ) )\n    ) )\n    screen_df$vars = factor( rownames(screen_df) , levels = rownames(screen_df)[order(screen_df$Estimate)] )\n    colnames(screen_df)[c(4,6:7)] = c('Pr', 'X2.5','X97.5')\n    if(!is.null(Pr)){ screen_df$Pr = Pr }\n    screen_df = screen_df[order(screen_df$Estimate),]\n    limits <- aes(ymax = X97.5, ymin=X2.5)\n    p <- ggplot(screen_df, aes(x=vars, y=Odds_Ratio,color=-log(Pr,10)))\n    p <- p + geom_point() + geom_errorbar(limits, width=0.2) + theme(axis.text.x = element_text(angle = 90, hjust = 1))\n    p <- p + scale_y_continuous(trans=trans) + scale_colour_gradientn(colours=col_scheme)\n    uni = p\n  }\n  \n  return(list(multivar=multi,univar=uni))\n}\n\n\n#' loading_vis\n#' \n#' Visualize loadings of a PCA\n#' @param res.pca a \"prcomp\" class object produced by PCA using prcomp\n#' @param var_catgories an optional vector of categories into which each variable can be classified\n#' @return a ggplot2 object showing the loadings of the \n#' @import ggplot2\n#' @import grDevices\n#' @export\nloading_vis<-function(res.pca,var_catgories=NULL){\n  ### Visualize contributors to PCs\n  rot = res.pca$rotation[,keep_all]\n  tmp = melt(rot)\n  colnames(tmp) = c('Variables','PC','Loadings')\n  tmp$PC = factor(tmp$PC,levels=levels(tmp$PC)[order(as.numeric(gsub('PC','',levels(tmp$PC))))])\n  tmp$Variables = factor(tmp$Variables,rownames(rot))\n  if(!is.null(var_catgories)){\n    tmp$Source = factor(var_catgories)\n  }\n  \n  g=ggplot(data=tmp,aes(y=Variables,x=Loadings,color=Source))+ geom_point()+\n    geom_segment(aes(x = 0 , y = Variables, xend = Loadings, yend = Variables, size=abs(Loadings), colour = factor(sign(Loadings)) ) ) +\n    facet_wrap(~PC,nrow=1) # + theme(axis.text.x = element_text(angle = 90, hjust = 1,size=5))\n  g\n}",
    "created" : 1474503851548.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "710945580",
    "id" : "4267879A",
    "lastKnownWriteTime" : 1474505940,
    "last_content_update" : 1474505940052,
    "path" : "~/Desktop/RegressionModelPipeline/R/vis.r",
    "project_path" : "R/vis.r",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}